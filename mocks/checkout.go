// Code generated by MockGen. DO NOT EDIT.
// Source: checkout.go

// Package mocks is a generated GoMock package.
package mocks

import (
	structs "checkout-system-gql/structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockICheckoutRepositories is a mock of ICheckoutRepositories interface
type MockICheckoutRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockICheckoutRepositoriesMockRecorder
}

// MockICheckoutRepositoriesMockRecorder is the mock recorder for MockICheckoutRepositories
type MockICheckoutRepositoriesMockRecorder struct {
	mock *MockICheckoutRepositories
}

// NewMockICheckoutRepositories creates a new mock instance
func NewMockICheckoutRepositories(ctrl *gomock.Controller) *MockICheckoutRepositories {
	mock := &MockICheckoutRepositories{ctrl: ctrl}
	mock.recorder = &MockICheckoutRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICheckoutRepositories) EXPECT() *MockICheckoutRepositoriesMockRecorder {
	return m.recorder
}

// RetrieveItems mocks base method
func (m *MockICheckoutRepositories) RetrieveItems(buyerId string) ([]structs.ItemsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveItems", buyerId)
	ret0, _ := ret[0].([]structs.ItemsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveItems indicates an expected call of RetrieveItems
func (mr *MockICheckoutRepositoriesMockRecorder) RetrieveItems(buyerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveItems", reflect.TypeOf((*MockICheckoutRepositories)(nil).RetrieveItems), buyerId)
}

// StoreListItems mocks base method
func (m *MockICheckoutRepositories) StoreListItems(cacheKey string, data structs.ItemsList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreListItems", cacheKey, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreListItems indicates an expected call of StoreListItems
func (mr *MockICheckoutRepositoriesMockRecorder) StoreListItems(cacheKey, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreListItems", reflect.TypeOf((*MockICheckoutRepositories)(nil).StoreListItems), cacheKey, data)
}

// DeleteItemsByBuyerID mocks base method
func (m *MockICheckoutRepositories) DeleteItemsByBuyerID(buyerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemsByBuyerID", buyerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemsByBuyerID indicates an expected call of DeleteItemsByBuyerID
func (mr *MockICheckoutRepositoriesMockRecorder) DeleteItemsByBuyerID(buyerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemsByBuyerID", reflect.TypeOf((*MockICheckoutRepositories)(nil).DeleteItemsByBuyerID), buyerId)
}
