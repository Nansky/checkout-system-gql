// Code generated by MockGen. DO NOT EDIT.
// Source: resolvers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	graphql "github.com/graphql-go/graphql"
	reflect "reflect"
)

// MockICheckoutServices is a mock of ICheckoutServices interface
type MockICheckoutServices struct {
	ctrl     *gomock.Controller
	recorder *MockICheckoutServicesMockRecorder
}

// MockICheckoutServicesMockRecorder is the mock recorder for MockICheckoutServices
type MockICheckoutServicesMockRecorder struct {
	mock *MockICheckoutServices
}

// NewMockICheckoutServices creates a new mock instance
func NewMockICheckoutServices(ctrl *gomock.Controller) *MockICheckoutServices {
	mock := &MockICheckoutServices{ctrl: ctrl}
	mock.recorder = &MockICheckoutServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockICheckoutServices) EXPECT() *MockICheckoutServicesMockRecorder {
	return m.recorder
}

// GetItemsResolver mocks base method
func (m *MockICheckoutServices) GetItemsResolver(params graphql.ResolveParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsResolver", params)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsResolver indicates an expected call of GetItemsResolver
func (mr *MockICheckoutServicesMockRecorder) GetItemsResolver(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsResolver", reflect.TypeOf((*MockICheckoutServices)(nil).GetItemsResolver), params)
}

// AddItemsResolver mocks base method
func (m *MockICheckoutServices) AddItemsResolver(params graphql.ResolveParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemsResolver", params)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemsResolver indicates an expected call of AddItemsResolver
func (mr *MockICheckoutServicesMockRecorder) AddItemsResolver(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemsResolver", reflect.TypeOf((*MockICheckoutServices)(nil).AddItemsResolver), params)
}

// CheckoutItemsResolver mocks base method
func (m *MockICheckoutServices) CheckoutItemsResolver(params graphql.ResolveParams) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutItemsResolver", params)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckoutItemsResolver indicates an expected call of CheckoutItemsResolver
func (mr *MockICheckoutServicesMockRecorder) CheckoutItemsResolver(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutItemsResolver", reflect.TypeOf((*MockICheckoutServices)(nil).CheckoutItemsResolver), params)
}
